/**
 * Bumpers Plugin
 */

videojs.plugin('bumpers', function(params) {
    var _context = {
        player: this,
        bumpers: params.bumpers || [],
        startPlayed: false,
        endPlayed: false,
        mainPlayed: false,
        poster: '',
        preloadReady: new Promise(function(resolve, reject) { })
    };

    _context.player.one("loadedmetadata", onLoadedMetadata);

    // listen for the "play" event and play the first bumper
    _context.player.on("play", onPlay);

    // listen for the "ended" event and play the next video or bumper
    _context.player.on('ended', onEnded);

    function onLoadedMetadata () {
        _context.bumpers.push({
            type: 'main',
            video: _context.player.mediainfo
        });

        _context.preloadReady = preload();
    }

    function onPlay () {
        if(!_context.startPlayed) {
            _context.preloadReady.then( function (context) {
                var startOption = getVideoOption('start');

                if(startOption) {
                    loadVideo(startOption, true, false);

                    context.poster = context.player.poster();
                    context.player.poster(null);

                    context.startPlayed = true;
                }
            });
        }
    }

    function onEnded () {
        if(_context.startPlayed && !_context.mainPlayed) {
            var mainOption = getVideoOption('main');

            if(mainOption) {
                loadVideo(mainOption, true, true);
                _context.mainPlayed = true;
            }

        } else if (_context.mainPlayed && !_context.endPlayed){
            var endOption = getVideoOption('end');

            if(endOption) {
                loadVideo(endOption, true, false);
                _context.endPlayed = true;
            }
        } else if (_context.endPlayed) {
            var mainOption = getVideoOption('main');

            _context.startPlayed = _context.mainPlayed = _context.endPlayed = false;

            _context.player.poster(_context.poster);
            loadVideo(mainOption, false, false);
        }
    }

    function loadVideo (option, autoPlay) {
        if(option.video && option.video.sources) {
            _context.player.src(option.video.sources);
        }
        
        if(autoPlay) {
            _context.player.play();
        }
    }

    function preload() {
        var getVideosReady = [Promise.resolve(_context)];
        for(var i = 0; i < _context.bumpers.length; i++ ) {
            if(_context.bumpers[i].videoId) {
                getVideosReady.push(_context.player.catalog.getVideo(_context.bumpers[i].videoId, getVideo));
            }
        }

        return Promise.all(getVideosReady).then(function (result) {
            //Pass the context to the chain
            return Promise.resolve(result[0]);
        });
    }

    function getVideo(error, video) {
        for(var j = 0; j < _context.bumpers.length; j++) {
            if(_context.bumpers[j].videoId == video.id) {
                if(!error) {
                    _context.bumpers[j].video = video;
                } else {
                    _context.bumpers[j].playable = false;
                }
            }
        }
    }

    function getVideoOption(type) {
        var opts = _context.bumpers.filter(function (value) {
                return value.type === type;
            });

        if(opts && opts.length > 0) {
            return opts[0];
        }

        return null;
    }

});